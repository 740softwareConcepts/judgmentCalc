import mysql.connector
from datetime import datetime, timedelta
import random

# Connect to MySQL database
connection = mysql.connector.connect(
    host="your_mysql_host",
    user="your_mysql_user",
    password="your_mysql_password",
    database="your_mysql_database"
)
cursor = connection.cursor()

# Create tables
create_clients_table_query = """
CREATE TABLE IF NOT EXISTS Clients (
    ClientID INTEGER PRIMARY KEY AUTO_INCREMENT,
    Name TEXT,
    LastName TEXT,
    DOB DATE,
    CreateDate DATE
)
"""

create_case_information_table_query = """
CREATE TABLE IF NOT EXISTS CaseInformation (
    CaseID INTEGER PRIMARY KEY AUTO_INCREMENT,
    ClientID INTEGER,
    CreateDate DATE,
    JudgmentDate DATE,
    FOREIGN KEY (ClientID) REFERENCES Clients(ClientID)
)
"""

# Execute table creation queries
cursor.execute(create_clients_table_query)
cursor.execute(create_case_information_table_query)

# Function to generate random date within a range
def generate_random_date(start_date, end_date):
    return start_date + timedelta(seconds=random.randint(0, int((end_date - start_date).total_seconds())))

# Function to add a new user
def useradd():
    print("User ADD:")
    first_name = input("Tell me the first name? ")
    last_name = input("And the last name? ")
    dob = input("Date of Birth (YYYY-MM-DD): ")
    create_date = input("Create Date (YYYY-MM-DD): ")

    # Option to enter an existing case number
    case_number = input("Enter Case Number (or leave blank to create a new case): ")

    if case_number:
        existing_case = find_case_by_id(int(case_number))
        if existing_case:
            # Associate the new user with the existing case
            customer_id = add_person(first_name, last_name, dob, create_date)
            cursor.execute(f"UPDATE CaseInformation SET ClientID = {customer_id} WHERE CaseID = {existing_case['CaseID']}")
            connection.commit()
            print(f"Client ID {customer_id} associated with Case ID {existing_case['CaseID']}.")
        else:
            print("Case not found. The user cannot be added to a non-existing case.")
    else:
        # Create a new case and associate it with the new user
        case_type = input("Case Type: ")
        case_create_date = input("Case Create Date (YYYY-MM-DD): ")
        case_id = add_case(case_type, case_create_date)

        # Add a person with the generated case ID
        customer_id = add_person(first_name, last_name, dob, create_date)
        cursor.execute(f"UPDATE CaseInformation SET ClientID = {customer_id} WHERE CaseID = {case_id}")
        connection.commit()

        print(f"Client ID {customer_id} associated with new Case ID {case_id}.")

    confirm = input("Type 'Y' to write to the table: ")
    if confirm.upper() == 'Y':
        print("OK, I've written the changes.")
    else:
        print("Changes not written.")

# Function to update user details
def userupdate():
    print("User UPDATE:")
    customer_id = input("Enter Client ID to update: ")
    first_name = input("Tell me the new first name? ")
    last_name = input("And the new last name? ")
    dob = input("New Date of Birth (YYYY-MM-DD): ")
    create_date = input("New Create Date (YYYY-MM-DD): ")

    update_person(int(customer_id), first_name, last_name, dob, create_date)
    print(f"User with Client ID {customer_id} updated.")

# Function to delete user
def userdelete():
    print("User DELETE:")
    customer_id = input("Enter Client ID to delete: ")
    delete_person(int(customer_id))
    print(f"User with Client ID {customer_id} deleted.")

# Function to find case by ID
def find_case_by_id(case_id):
    cursor.execute(f"SELECT * FROM CaseInformation WHERE CaseID = {case_id}")
    return cursor.fetchone()

# Function to add a person
def add_person(first_name, last_name, dob, create_date):
    cursor.execute("""
        INSERT INTO Clients (Name, LastName, DOB, CreateDate)
        VALUES (%s, %s, %s, %s)
    """, (first_name, last_name, dob, create_date))
    connection.commit()
    return cursor.lastrowid

# Function to add a case
def add_case(case_type, create_date):
    cursor.execute("""
        INSERT INTO CaseInformation (CaseType, CreateDate)
        VALUES (%s, %s)
    """, (case_type, create_date))
    connection.commit()
    return cursor.lastrowid

# Function to update person details
def update_person(customer_id, first_name, last_name, dob, create_date):
    cursor.execute("""
        UPDATE Clients
        SET Name = %s, LastName = %s, DOB = %s, CreateDate = %s
        WHERE ClientID = %s
    """, (first_name, last_name, dob, create_date, customer_id))
    connection.commit()

# Function to delete person
def delete_person(customer_id):
    cursor.execute("DELETE FROM Clients WHERE ClientID = %s", (customer_id,))
    connection.commit()

# You can now call the functions as needed
useradd()
userupdate()
userdelete()

# Close the connection
connection.close()

